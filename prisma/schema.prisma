// ✅ 1️⃣ მონაცემთა ბაზის კავშირი

datasource db {
provider = "postgresql"
url      = env("DATABASE_URL")
}

// ✅ 2️⃣ Prisma Client-ის გენერაციის ბლოკი
generator client {
provider = "prisma-client-js"
}

// ✅ 3️⃣ როლების ცხრილი
model Role {
id    Int    @id @default(autoincrement())
name  String @unique
users User[]
}

// ✅ 4️⃣ მომხმარებლის ცხრილი
model User {
id        Int       @id @default(autoincrement())
email     String    @unique
password  String
roleId    Int
role      Role      @relation(fields: [roleId], references: [id])
createdAt DateTime  @default(now())
projects  Project[]
}

// ✅ 5️⃣ პროექტების ცხრილი
model Project {
id          Int        @id @default(autoincrement())
name        String     @unique
description String?
ownerId     Int
owner       User       @relation(fields: [ownerId], references: [id])
createdAt   DateTime   @default(now())
updatedAt   DateTime   @updatedAt
templates   Template[]
widgets     Widget[]
pages       Page[]
}

// ✅ 6️⃣ შაბლონების ცხრილი
model Template {
id          Int      @id @default(autoincrement())
name        String   @unique
description String?
createdAt   DateTime @default(now())
updatedAt   DateTime @updatedAt
projectId   Int
project     Project  @relation(fields: [projectId], references: [id])
widgets     Widget[]
}

// ✅ 7️⃣ ვიჯეტების ცხრილი
model Widget {
id       Int    @id @default(autoincrement())
name     String
type     String // ვიჯეტის ტიპი (მაგ.: 'button', 'input', 'image' და ა.შ.)
settings Json // JSON ველი, რომელიც ინახავს ვიჯეტის პარამეტრებს

projectId Int?
project   Project? @relation(fields: [projectId], references: [id])

templateId Int?
template   Template? @relation(fields: [templateId], references: [id])

createdAt      DateTime         @default(now())
updatedAt      DateTime         @updatedAt
widgetInstances WidgetInstance[]
}

// ✅ 8️⃣ გვერდები (Pages)
model Page {
id         Int         @id @default(autoincrement())
name       String
projectId  Int
project    Project     @relation(fields: [projectId], references: [id])
components Component[]
createdAt  DateTime    @default(now())
updatedAt  DateTime    @updatedAt
}

// ✅ 9️⃣ კომპონენტები (Components)
model Component {
id              Int              @id @default(autoincrement())
name            String
type            String
pageId          Int
page            Page             @relation(fields: [pageId], references: [id])
widgetInstances WidgetInstance[]
createdAt       DateTime         @default(now())
updatedAt       DateTime         @updatedAt
}

// ✅ 🔟 ვიჯეტების ინდივიდუალური კონფიგურაცია (WidgetInstance)
model WidgetInstance {
id          Int       @id @default(autoincrement())
widgetId    Int
componentId Int
component   Component @relation(fields: [componentId], references: [id])
widget      Widget    @relation(fields: [widgetId], references: [id])
settings    Json
createdAt   DateTime  @default(now())
}
