generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String
  firstName String?
  lastName  String?
  avatarUrl String?
  roleId    Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  role      Role       @relation(fields: [roleId], references: [id])
  projects  Project[]
  templates Template[]
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  ownerId     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner       User     @relation(fields: [ownerId], references: [id])
  pages       Page[]
}

model Page {
  id                  Int                  @id @default(autoincrement())
  name                String
  description         String?
  projectId           Int
  templateId          Int?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  project             Project              @relation(fields: [projectId], references: [id])
  template            Template?            @relation(fields: [templateId], references: [id])
  components          Component[]
  widgetInstances     WidgetInstance[]
  componentInstances  ComponentInstance[]
}

model Component {
  id                  Int                  @id @default(autoincrement())
  name                String
  type                String
  config              Json                 @default("{}")
  pageId              Int
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  page                Page                 @relation(fields: [pageId], references: [id])
  componentInstances  ComponentInstance[]
}

model ComponentInstance {
  id          Int      @id @default(autoincrement())
  name        String
  config      Json
  componentId Int
  pageId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  page        Page      @relation(fields: [pageId], references: [id])
  component   Component @relation(fields: [componentId], references: [id])
}

model Widget {
  id              Int              @id @default(autoincrement())
  name            String
  config          Json
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  widgetInstances WidgetInstance[]
}

model WidgetInstance {
  id        Int      @id @default(autoincrement())
  name      String
  config    Json     @default("{}")
  widgetId  Int
  pageId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  widget    Widget   @relation(fields: [widgetId], references: [id])
  page      Page     @relation(fields: [pageId], references: [id])
}

model Template {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  ownerId     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner       User     @relation(fields: [ownerId], references: [id])
  pages       Page[]
}


