generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model User {
  id                 Int                 @id @default(autoincrement())
  email              String              @unique
  password           String
  roleId             Int
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  components         Component[]
  componentInstances ComponentInstance[]
  pages              Page[]
  projects           Project[]
  templates          Template[]
  role               Role                @relation(fields: [roleId], references: [id])
  widgets            Widget[]
  widgetInstances    WidgetInstance[]
}

model Project {
  id                 Int                 @id @default(autoincrement())
  name               String
  description        String?
  ownerId            Int
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  components         Component[]
  componentInstances ComponentInstance[]
  pages              Page[]
  User               User                @relation(fields: [ownerId], references: [id])
  widgets            Widget[]
  widgetInstances    WidgetInstance[]
}

model Page {
  id                 Int                 @id @default(autoincrement())
  name               String
  description        String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  ownerId            Int
  projectId          Int?
  templateId         Int?
  components         Component[]
  componentInstances ComponentInstance[]
  User               User                @relation(fields: [ownerId], references: [id])
  Project            Project?            @relation(fields: [projectId], references: [id])
  Template           Template?           @relation(fields: [templateId], references: [id])
  widgets            Widget[]
  widgetInstances    WidgetInstance[]
}

model Component {
  id                 Int                 @id @default(autoincrement())
  name               String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  description        String?
  ownerId            Int
  config             Json?
  pageId             Int?
  projectId          Int?
  User               User                @relation(fields: [ownerId], references: [id])
  Page               Page?               @relation(fields: [pageId], references: [id])
  Project            Project?            @relation(fields: [projectId], references: [id])
  componentInstances ComponentInstance[]
  widgets            Widget[]
  widgetInstances    WidgetInstance[]
}

model ComponentInstance {
  id             Int              @id @default(autoincrement())
  name           String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  description    String?
  ownerId        Int
  componentId    Int?
  config         Json?
  pageId         Int?
  projectId      Int?
  widgetId       Int?
  Component      Component?       @relation(fields: [componentId], references: [id])
  User           User             @relation(fields: [ownerId], references: [id])
  Page           Page?            @relation(fields: [pageId], references: [id])
  Project        Project?         @relation(fields: [projectId], references: [id])
  Widget         Widget?          @relation(fields: [widgetId], references: [id])
  WidgetInstance WidgetInstance[]
}

model Widget {
  id                Int                 @id @default(autoincrement())
  name              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  description       String?
  ownerId           Int
  componentId       Int?
  pageId            Int?
  projectId         Int?
  ComponentInstance ComponentInstance[]
  Component         Component?          @relation(fields: [componentId], references: [id])
  User              User                @relation(fields: [ownerId], references: [id])
  Page              Page?               @relation(fields: [pageId], references: [id])
  Project           Project?            @relation(fields: [projectId], references: [id])
  widgetInstances   WidgetInstance[]
}

model WidgetInstance {
  id                  Int                @id @default(autoincrement())
  name                String
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  description         String?
  ownerId             Int
  config              Json?
  pageId              Int?
  widgetId            Int?
  componentId         Int?
  componentInstanceId Int?
  projectId           Int?
  type                String?
  Component           Component?         @relation(fields: [componentId], references: [id])
  ComponentInstance   ComponentInstance? @relation(fields: [componentInstanceId], references: [id])
  User                User               @relation(fields: [ownerId], references: [id])
  Page                Page?              @relation(fields: [pageId], references: [id])
  Project             Project?           @relation(fields: [projectId], references: [id])
  Widget              Widget?            @relation(fields: [widgetId], references: [id])
}

model Template {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  ownerId     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  pages       Page[]
  User        User     @relation(fields: [ownerId], references: [id])
}

model Canvas {
  id        Int      @id @default(autoincrement())
  tools     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
